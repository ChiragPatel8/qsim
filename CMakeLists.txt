set(CMAKE_CXX_STANDARD 11)
set(OpenMP_INCLUDE_DIR "/Users/bas.nijholt/micromamba/lib/clang/17.0.4/include")
include_directories(${OpenMP_INCLUDE_DIR})
cmake_minimum_required(VERSION 3.11)

if(APPLE)
    # Returns x86_64 or arm64
    execute_process(COMMAND uname -m OUTPUT_VARIABLE OSX_ARCH OUTPUT_STRIP_TRAILING_WHITESPACE)
    if (OSX_ARCH STREQUAL "arm64")
        set(APPLE_ARM TRUE)
    else()
        set(APPLE_ARM FALSE)
    endif()
else()
    set(APPLE_ARM FALSE)
endif(APPLE)
message(STATUS "APPLE_ARM: ${APPLE_ARM}")

ADD_SUBDIRECTORY(pybind_interface/basic)
ADD_SUBDIRECTORY(pybind_interface/decide)

# You can then use this variable to control conditional compilation
if(APPLE_ARM)
    project(qsim LANGUAGES CXX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=armv8-a")
else()
    execute_process(COMMAND which nvcc OUTPUT_VARIABLE has_nvcc)
    if(has_nvcc STREQUAL "")
        execute_process(COMMAND which hipcc OUTPUT_VARIABLE has_hipcc)
        if(has_hipcc STREQUAL "")
            project(qsim LANGUAGES CXX)
        else()
            project(qsim LANGUAGES CXX HIP)
            ADD_SUBDIRECTORY(pybind_interface/hip)
        endif()
    else()
        project(qsim LANGUAGES CXX CUDA)
        ADD_SUBDIRECTORY(pybind_interface/cuda)
        if(DEFINED ENV{CUQUANTUM_ROOT})
            ADD_SUBDIRECTORY(pybind_interface/custatevec)
        endif()
    endif()

    ADD_SUBDIRECTORY(pybind_interface/sse)
    ADD_SUBDIRECTORY(pybind_interface/avx512)
    ADD_SUBDIRECTORY(pybind_interface/avx2)
endif()
find_package(OpenMP REQUIRED)
